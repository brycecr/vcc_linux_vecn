diff --git a/include/linux/tcp.h b/include/linux/tcp.h
index 67309ec..c927344 100644
--- a/include/linux/tcp.h
+++ b/include/linux/tcp.h
@@ -309,6 +309,26 @@ struct tcp_sock {
 	struct tcp_md5sig_info	__rcu *md5sig_info;
 #endif
 
+	/* this might be a terrible idea because sock is a basic
+	 * data structure so it is quite likely that assumptions are made
+	 * about its size or what is at the end of it...
+	 * in that likely case, here goes nothing */
+	struct {
+		u32 acked_bytes_ecn;
+		u32 acked_bytes_total;
+		u32 prior_snd_una;
+		u32 prior_rcv_nxt;
+		u32 dctcp_alpha;
+		u32 next_seq;
+		u32 ce_state;
+		u32 delayed_ack_reserved;
+		u32 target_window;
+		u32 last_window;
+		u32 last_cwnd_red_ts;
+		u32 last_cwnd_inc_ts;
+		u32 pkts_in_flight;
+	} vtcp_state;
+
 /* TCP fastopen related information */
 	struct tcp_fastopen_request *fastopen_req;
 	/* fastopen_rsk points to request_sock that resulted in this big
@@ -378,4 +398,39 @@ static inline int fastopen_init_queue(struct sock *sk, int backlog)
 	return 0;
 }
 
+/**
+ * Initialize tcp parameters for this socket
+ */
+static inline int vtcp_init(struct sock *sk)
+{
+	/*
+	 * if ((tp->ecn_flags & TCP_ECN_OK) ||
+	 *   (sk->sk_state == TCP_LISTEN ||
+	 *    sk->sk_state == TCP_CLOSE)) {
+	 */
+	struct tcp_sock *tp = tcp_sk(sk);
+
+	tp->vtcp_state.prior_snd_una = 0;
+	tp->vtcp_state.prior_rcv_nxt = 0;
+
+	tp->vtcp_state.dctcp_alpha = 1024U; // should be configurable...but isn't. Yet.
+
+	tp->vtcp_state.delayed_ack_reserved = 0;
+	tp->vtcp_state.ce_state = 0;
+
+	tp->vtcp_state.next_seq = tp->snd_nxt;
+
+	tp->vtcp_state.acked_bytes_ecn = 0;
+	tp->vtcp_state.acked_bytes_total = 0;
+
+	tp->vtcp_state.target_window = 0;
+	tp->vtcp_state.last_window = 0;
+
+	tp->vtcp_state.last_cwnd_red_ts = 0;
+	tp->vtcp_state.last_cwnd_inc_ts = 0;
+	tp->vtcp_state.pkts_in_flight = 0;
+
+	return 0;
+}
+
 #endif	/* _LINUX_TCP_H */
diff --git a/include/net/netns/ipv4.h b/include/net/netns/ipv4.h
index 0ffef1a..d8e1674 100644
--- a/include/net/netns/ipv4.h
+++ b/include/net/netns/ipv4.h
@@ -75,6 +75,7 @@ struct netns_ipv4 {
 	struct local_ports ip_local_ports;
 
 	int sysctl_tcp_ecn;
+	int sysctl_tcp_vtcp;
 	int sysctl_ip_no_pmtu_disc;
 	int sysctl_ip_fwd_use_pmtu;
 	int sysctl_ip_nonlocal_bind;
diff --git a/include/net/sock.h b/include/net/sock.h
index 2210fec..a9a64f7 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -427,6 +427,7 @@ struct sock {
 #ifdef CONFIG_SECURITY
 	void			*sk_security;
 #endif
+
 	__u32			sk_mark;
 	u32			sk_classid;
 	struct cg_proto		*sk_cgrp;
diff --git a/net/ipv4/sysctl_net_ipv4.c b/net/ipv4/sysctl_net_ipv4.c
index e0ee384..a183b0c 100644
--- a/net/ipv4/sysctl_net_ipv4.c
+++ b/net/ipv4/sysctl_net_ipv4.c
@@ -828,6 +828,13 @@ static struct ctl_table ipv4_net_table[] = {
 		.proc_handler	= proc_dointvec
 	},
 	{
+		.procname	= "tcp_vtcp",
+		.data		= &init_net.ipv4.sysctl_tcp_vtcp,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec
+	},
+	{
 		.procname	= "ip_local_port_range",
 		.maxlen		= sizeof(init_net.ipv4.ip_local_ports.range),
 		.data		= &init_net.ipv4.ip_local_ports.range,
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index 3075723..318e6c1 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -422,6 +422,7 @@ void tcp_init_sock(struct sock *sk)
 	sock_update_memcg(sk);
 	sk_sockets_allocated_inc(sk);
 	local_bh_enable();
+	vtcp_init(sk);
 }
 EXPORT_SYMBOL(tcp_init_sock);
 
@@ -2586,6 +2587,7 @@ static int do_tcp_setsockopt(struct sock *sk, int level,
 		break;
 	}
 
+
 	release_sock(sk);
 	return err;
 }
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index 075ab4d..8b94630 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -3397,12 +3397,13 @@ static inline void tcp_in_ack_event(struct sock *sk, u32 flags)
 		icsk->icsk_ca_ops->in_ack_event(sk, flags);
 }
 
+
 /* This routine deals with incoming acks, but not outgoing ones. */
-static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
+static int __tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
 {
 	struct inet_connection_sock *icsk = inet_csk(sk);
 	struct tcp_sock *tp = tcp_sk(sk);
-	u32 prior_snd_una = tp->snd_una;
+	u32 prior_snd_una = tp->snd_una; // first byte we want ack for
 	u32 ack_seq = TCP_SKB_CB(skb)->seq;
 	u32 ack = TCP_SKB_CB(skb)->ack_seq;
 	bool is_dupack = false;
@@ -3560,6 +3561,109 @@ old_ack:
 	return 0;
 }
 
+#define VTCP_DCTCP_MAX_ALPHA 1024U
+static int tcp_ack(struct sock *sk, const struct sk_buff *skb, int flag)
+{
+	const struct net *net = sock_net(sk);
+
+	struct tcp_sock *tp = tcp_sk(sk);
+        struct tcphdr *th = tcp_hdr(skb);
+	u32 prior_snd_una = tp->snd_una; // first byte we want ack for
+	u32 ack = TCP_SKB_CB(skb)->ack_seq;
+
+	/* 
+	 * Guard this so that sysctl can act as a proxy for turning on
+	 * and off the fakEcn behavior. Of course, the "fake" behavior
+	 * should be split into a different sysctl to make the switches
+	 * single purpose and more modular
+	 */
+	if (net->ipv4.sysctl_tcp_vtcp == 1 && net->ipv4.sysctl_tcp_ecn == 1) {
+		if (before(ack, prior_snd_una)) {
+			return __tcp_ack(sk, skb, flag);
+		}
+		/* 
+		 * This block initiates throttling.
+		 * first: does current packet have ECE?
+		 * second: is this not a syn? (ECN on SYN is negotiation, not congestion signal)
+		 * third: is ecn on for this socket?
+		 * fourth: is time running?
+		 */
+                printk("VTCP SAYS: srtt %u\n", tp->srtt_us);
+		if (th->ece && !th->syn && (tp->ecn_flags & TCP_ECN_OK)//){
+			&& tcp_time_stamp - tp->vtcp_state.last_cwnd_red_ts >= usecs_to_jiffies(tp->srtt_us >> 3) ) {
+			printk("VTCP SAYS: HEY %u\n", tp->vtcp_state.ce_state);
+			if (tp->vtcp_state.ce_state != 0) {
+				// in throttled growth state, halve window and start reducing
+				tp->vtcp_state.target_window = max(tp->vtcp_state.last_window/2U, 2896U); // halve the current window
+				tp->vtcp_state.ce_state = 2; // decreasing mode
+
+				printk("VTCP SAYS: killed while growing, target %u last %u\n",tp->vtcp_state.target_window,tp->vtcp_state.last_window);
+
+			} else if (tp->vtcp_state.ce_state==0) {
+				// state transfer: from no throttling to reducing window
+				tp->vtcp_state.ce_state = 2;
+				tp->vtcp_state.target_window = max(tp->snd_cwnd*1448/2U, 2896U);
+				tp->vtcp_state.last_window = tp->snd_cwnd*1448;
+
+				printk("VTCP SAYS: Saw a new ECN setting target window and turing CC on, target %u last %u\n",tp->vtcp_state.target_window,tp->vtcp_state.last_window);
+			}
+
+			tp->vtcp_state.last_cwnd_red_ts = tcp_time_stamp;
+			tp->vtcp_state.pkts_in_flight = 0;
+			tcp_ecn_queue_cwr(tp);
+		}
+
+		/* How do we know ECN is "no longer" being requested?
+		 * It looks like actually what's supposed to happen is that ECE keeps getting
+		 * sent until the sender sends a CWR indicating that it has reduced its sending window
+		 * so we wait until we have reached the target window then send (queue) CWR. It may not
+		 * really matter if we do this then or when we start to have the intention to lower the window,
+		 * however.
+		 */
+		if (tp->vtcp_state.ce_state==2) {
+			printk("VTCP SAYS: Max of %u and %u", tcp_packets_in_flight(tp)*1448-(ack - prior_snd_una), tp->vtcp_state.target_window);
+			if (ack - prior_snd_una > tcp_packets_in_flight(tp)*1448) {
+				tp->vtcp_state.last_window = tp->vtcp_state.target_window;
+			} else {
+				tp->vtcp_state.last_window = max (tcp_packets_in_flight(tp)*1448-(ack - prior_snd_una), tp->vtcp_state.target_window);
+			}
+			unsigned short otherthinga = (unsigned short)((tp->vtcp_state.last_window >> tp->rx_opt.snd_wscale));
+			th->window = htons(otherthinga);
+			if (tp->vtcp_state.last_window <= tp->vtcp_state.target_window  ) {
+				tp->vtcp_state.ce_state = 1;
+				printk("VTCP SAYS: CWR SENT and CE MODE to 1\n");
+		//		tp->vtcp_state.last_cwnd_red_ts = 0;
+			}
+
+		} else if (tp->vtcp_state.ce_state == 1) {
+			// throttled growth state
+                        tp->vtcp_state.pkts_in_flight += (ack - prior_snd_una);
+			if (tcp_time_stamp - tp->vtcp_state.last_cwnd_inc_ts >= usecs_to_jiffies(tp->srtt_us >> 3)) {
+                                printk("VTCP SAYS: Increment by %u", ((ack - prior_snd_una)));
+				tp->vtcp_state.last_window += (tp->vtcp_state.pkts_in_flight*1448) / tp->vtcp_state.last_window;
+				tp->vtcp_state.last_cwnd_inc_ts = tcp_time_stamp;
+				tp->vtcp_state.pkts_in_flight = 0;
+			}
+                        unsigned short otherthing = (unsigned short)(tp->vtcp_state.last_window >> tp->rx_opt.snd_wscale);
+			th->window = htons(otherthing);
+			if (tp->vtcp_state.last_window >= tp->snd_cwnd*1448) {
+				// hmm we could return from throttled here
+				printk("VTCP SAYS: Passed congestion window, let things run on\n");
+			}
+			//tp->vtcp_state.pkts_in_flight += 1;
+		}
+		printk("VTCP SAYS: The window is %u and is supposed to be %u\n", ntohs(th->window), tp->vtcp_state.last_window);
+		printk("VTCP SAYS: State is %u, target is %u, and pkts in flight is %u scale is %u\n",
+			tp->vtcp_state.ce_state, tp->vtcp_state.target_window, tcp_packets_in_flight(tp), tp->rx_opt.snd_wscale);
+
+		// always shield the guest from ECN
+		th->ece = 0;
+	}
+
+	// We're a wrapper, remember =] ?
+	return __tcp_ack(sk, skb, flag);
+}
+
 /* Look for tcp options. Normally only called on SYN and SYNACK packets.
  * But, this can also be called on packets in the established flow when
  * the fast version below fails.
@@ -5892,6 +5996,10 @@ static void tcp_ecn_create_request(struct request_sock *req,
 	need_ecn = tcp_ca_needs_ecn(listen_sk);
 	ecn_ok = net->ipv4.sysctl_tcp_ecn || dst_feature(dst, RTAX_FEATURE_ECN);
 
+	printk("VTCP SAYS: ect is %u\n", ect);
+	printk("VTCP SAYS: need_ecn is %u\n", need_ecn);
+	printk("VTCP SAYS: ecn_ok is %u\n", ecn_ok);
+
 	if (!ect && !need_ecn && ecn_ok)
 		inet_rsk(req)->ecn_ok = 1;
 	else if (ect && need_ecn)
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index d22f544..c7bb65f 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -2457,6 +2457,7 @@ static int __net_init tcp_sk_init(struct net *net)
 		*per_cpu_ptr(net->ipv4.tcp_sk, cpu) = sk;
 	}
 	net->ipv4.sysctl_tcp_ecn = 2;
+	net->ipv4.sysctl_tcp_vtcp = 0;
 	return 0;
 
 fail:
